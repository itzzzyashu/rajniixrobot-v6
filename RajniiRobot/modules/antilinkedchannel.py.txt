import html
from telegram.error import TelegramError
from telegram import Update
from telegram.ext import CallbackContext
from telegram.ext import filters

from RajniiRobot import dispatcher
from RajniiRobot.modules.disable import DisableAbleCommandHandler
from RajniiRobot.modules.helper_funcs.anonymous import user_admin
from RajniiRobot.modules.helper_funcs.chat_status import bot_can_delete, bot_admin
import RajniiRobot.modules.sql.antilinkedchannel_sql as sql

@bot_can_delete
@user_admin
async def set_antilinkedchannel(update: Update, context: CallbackContext):
    message = update.effective_message
    chat = update.effective_chat
    args = context.args
    if len(args) > 0:
        s = args[0].lower()
        if s in ["yes", "on"]:
            sql.enable(chat.id)
            await message.reply_html(
                f"Enabled anti linked channel in {html.escape(chat.title)}"
            )

        elif s in ["off", "no"]:
            sql.disable(chat.id)
            await message.reply_html(
                f"Disabled anti linked channel in {html.escape(chat.title)}"
            )

        else:
            await update.effective_message.reply_text(f"Unrecognized arguments {s}")
        return
    message.reply_html(
        f"Linked channel deletion is currently {sql.status(chat.id)} in {html.escape(chat.title)}"
    )


async def eliminate_linked_channel_msg(update: Update, _: CallbackContext):
    message = update.effective_message
    chat = update.effective_chat
    if not sql.status(chat.id):
        return
    try:
        await message.delete()
    except TelegramError:
        return

@bot_admin
@user_admin
async def set_antipinchannel(update: Update, context: CallbackContext):
    message = update.effective_message
    chat = update.effective_chat
    args = context.args
    if len(args) > 0:
        s = args[0].lower()
        if s in ["yes", "on"]:
            if sql.status_linked(chat.id):
                sql.disable_linked(chat.id)
                sql.enable_pin(chat.id)
                await message.reply_html(
                    f"Disabled Linked channel deletion and Enabled anti channel pin in {html.escape(chat.title)}"
                )

            else:
                sql.enable_pin(chat.id)
                await message.reply_html(
                    f"Enabled anti channel pin in {html.escape(chat.title)}"
                )

        elif s in ["off", "no"]:
            sql.disable_pin(chat.id)
            await message.reply_html(
                f"Disabled anti channel pin in {html.escape(chat.title)}"
            )

        else:
            await update.effective_message.reply_text(f"Unrecognized arguments {s}")
        return
    message.reply_html(
        f"Linked channel message unpin is currently {sql.status_pin(chat.id)} in {html.escape(chat.title)}"
    )

def eliminate_linked_channel_msg(update: Update, _: CallbackContext):
    message = update.effective_message
    chat = update.effective_chat
    if not sql.status_pin(chat.id):
        return
    try:
        message.unpin()
    except TelegramError:
        return

SET_ANTILINKEDCHANNEL = DisableAbleCommandHandler("antilinkedchan", set_antilinkedchannel, filters=filters.ChatType.GROUPS)
SET_ANTI_PIN_CHANNEL = DisableAbleCommandHandler("antichannelpin", set_antipinchannel, filters=filters.ChatType.GROUPS)

dispatcher.add_handler(SET_ANTILINKEDCHANNEL)
dispatcher.add_handler(SET_ANTI_PIN_CHANNEL)